#!/usr/bin/groovy
library identifier: 'PsObaiLib', changelog: false
 
try {
    node {
		def msbuildPath = tool name: 'MsBuild', type: 'hudson.plugins.msbuild.MsBuildInstallation'
		def sonarToolPath = tool name:'Morgan-SONAR', type: 'hudson.plugins.sonar.MsBuildSQRunnerInstallation'
		properties([parameters([booleanParam(defaultValue: false, description: '', name: 'DeploymentParameterTest')])])
		if (DeploymentParameterTest == "true")
            {
                echo "Test success"
            }
            else
            {
                echo "Test failure"   
            }
		
		stage ('\u2777 Checkout')
		{
			checkoutUrl(["https://github.com/areshdeep/TestRepository"])
		}
        stage ('\u2777 Sonar Test')
		{
			withSonarQubeEnv('DOJO-SONAR') {
				bat "\"${sonarToolPath}\\SonarQube.Scanner.MSBuild.exe\" begin /k:$serviceJobName /n:$JOB_NAME /v:$BUILD_NUMBER /d:sonar.cs.vstest.reportsPaths=\"TestResults\\*.trx\" /d:sonar.cs.opencover.reportsPaths=\"${WORKSPACE}\\coverage-log.xml\""
				bat "\"${msbuildPath}\\msbuild.exe\" \"${WORKSPACE}\\TestRepository\\SampleJenkins\\SampleApp.sln\" /t:build /p:Configuration="Debug" /p:DeployOnBuild=true /p:WebPublishMethod=Package  /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true"
				
				
				
				def creds = 'git-credentials'
				def sonarfile = '.sonarqube/out/.sonar/report-task.txt'
				def sprops = readProperties  file: sonarfile
				def sonarServerUrl=sprops['serverUrl']
				def ceTaskUrl= sprops['ceTaskUrl']
				def ceTask
				timeout(time: 1, unit: 'MINUTES') {
					waitUntil {
						def response = httpRequest url: ceTaskUrl , authentication: creds
						ceTask = readJSON text: response.content
						echo ceTask.toString()
						return "SUCCESS".equals(ceTask["task"]["status"])
					}
				}
				def qgresponse = httpRequest url : sonarServerUrl + "/api/qualitygates/project_status?analysisId=" + ceTask["task"]["analysisId"], authentication: creds
				def qualitygate =  readJSON text: qgresponse.content
				if ("ERROR".equals(qualitygate["projectStatus"]["status"])) {
					error  "Quality Gate failure"
				}
			}
		}
        
		stage ('\u2777 Checkout') {
			
		}
		stage ('\u2777 Build') {
		}
        
        stage '\u2777 Tesing'
        
        stage '\u2777 Deploy'
        
        stage '\u2777 SonarQube Analysis'
		
			
    }
} 
catch (exc) {
    print exc
} 